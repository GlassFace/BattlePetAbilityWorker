import DB2.BattlePetAbility;
import DB2.BattlePetAbilityEffect;
import DB2.BattlePetAbilityState;
import DB2.BattlePetAbilityTurn;
import DB2.BattlePetEffectProperties;
import DB2.BattlePetState;
import DB2.DB2Stores;
import Enums.PetAbilityProcType;
import Enums.PetSchool;
import java.awt.Toolkit;
import java.util.List;
import javax.swing.table.DefaultTableModel;

public class GUI extends javax.swing.JFrame
{
    public GUI()
    {
        initComponents();
        setLocationRelativeTo(null);

        FillAbilitiesList();
        
        for (BattlePetEffectProperties properties : DB2Stores.battlePetEffectPropertiesStore)
            effectPropertiesFilter.addItem(properties.index);

        abilitiesList.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                abilitiesListValueChanged(evt);
            }
        });
    }

    public void FillAbilitiesList()
    {
        FillAbilitiesList(-1); // all abilities
    }
    
    public void FillAbilitiesList(int effectPropertiesId)
    {
        for (int i = abilitiesList.getRowCount() - 1; i >= 0; i--)
            ((DefaultTableModel)abilitiesList.getModel()).removeRow(i);

        for (BattlePetAbility ability : DB2Stores.battlePetAbilityStore)
        {
            boolean found = false;

            if (effectPropertiesId != -1)
            {
                List<BattlePetAbilityTurn> turns = DB2Stores.abilityTurnsByAbility.get(ability.index);
                if (turns == null)
                    continue;

                for (BattlePetAbilityTurn turn : turns)
                {
                    List<BattlePetAbilityEffect> effects = DB2Stores.abilityEffectsByAbilityTurn.get(turn.index);
                    if (effects == null)
                        continue;

                    for (BattlePetAbilityEffect effect : effects)
                    {
                        if (effect.effectPropertiesID == effectPropertiesId)
                        {
                            ((DefaultTableModel)abilitiesList.getModel()).addRow(new Object[] {ability.index, ability.name});
                            found = true;
                            break;
                        }
                    }
                    
                    if (found)
                        break;
                }
            }
            else
                ((DefaultTableModel)abilitiesList.getModel()).addRow(new Object[] {ability.index, ability.name});
        }
        
        count.setText(abilitiesList.getRowCount() + "");
    }

    public void FillAbilitiesList(String abilityName)
    {
        for (int i = abilitiesList.getRowCount() - 1; i >= 0; i--)
            ((DefaultTableModel)abilitiesList.getModel()).removeRow(i);

        for (BattlePetAbility ability : DB2Stores.battlePetAbilityStore)
            if (ability.name.toLowerCase().contains(abilityName.toLowerCase()))
                ((DefaultTableModel)abilitiesList.getModel()).addRow(new Object[] {ability.index, ability.name});
        
        count.setText(abilitiesList.getRowCount() + "");
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        abilityInfo = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        abilitiesList = new javax.swing.JTable();
        effectPropertiesFilter = new javax.swing.JComboBox();
        filterButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        count = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        abilityNameFilter = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BattlePetAbilitiesWorker");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Img/inv_pet_battlepettraining.jpg")));
        setMinimumSize(new java.awt.Dimension(400, 200));
        setResizable(false);

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 200));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(804, 478));

        abilityInfo.setEditable(false);
        abilityInfo.setBorder(null);
        abilityInfo.setContentType("text/html"); // NOI18N
        abilityInfo.setText("");
        jScrollPane1.setViewportView(abilityInfo);

        jScrollPane2.setMinimumSize(new java.awt.Dimension(250, 100));

        abilitiesList.setAutoCreateRowSorter(true);
        abilitiesList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        abilitiesList.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        abilitiesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        abilitiesList.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(abilitiesList);
        abilitiesList.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (abilitiesList.getColumnModel().getColumnCount() > 0) {
            abilitiesList.getColumnModel().getColumn(0).setMinWidth(50);
            abilitiesList.getColumnModel().getColumn(0).setPreferredWidth(70);
            abilitiesList.getColumnModel().getColumn(1).setMinWidth(80);
            abilitiesList.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        effectPropertiesFilter.setMinimumSize(new java.awt.Dimension(30, 20));

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Count:");

        jLabel2.setText("Ability name:");

        abilityNameFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        jLabel3.setText("Properties:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(effectPropertiesFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(26, 26, 26)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(abilityNameFilter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(abilityNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filterButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(count, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(effectPropertiesFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetButton)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        if (abilityNameFilter.getText().isEmpty() && evt.getSource() == filterButton)
            FillAbilitiesList(Integer.valueOf(effectPropertiesFilter.getSelectedItem().toString()));
        else
            FillAbilitiesList(abilityNameFilter.getText());
    }//GEN-LAST:event_filterButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        abilityNameFilter.setText("");
        FillAbilitiesList();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void abilitiesListValueChanged(javax.swing.event.ListSelectionEvent evt) {
        if (evt.getValueIsAdjusting() || abilitiesList.getSelectedRow() == -1)
            return;
                
        int abilityId = Integer.valueOf(abilitiesList.getValueAt(abilitiesList.getSelectedRow(), 0).toString());
        for (BattlePetAbility ability : DB2Stores.battlePetAbilityStore)
        {
            if (ability.index == abilityId)
            {
                String text = "<html><body><h1>" + ability.name + " (ID: " + ability.index + ")</h1>" + ability.description + "<br /><br />School: " + ability.school.name()
                        + "<br />Cooldown: " + ability.cooldown + (ability.cooldown == 1 ? " round" : " rounds")
                        + "<br />Visual ID (?): " + ability.visualID + "<br/>Unknown (?): " + ability.turnID;
                
                boolean hasStateMods = false;
                for (BattlePetAbilityState abilityState : DB2Stores.battlePetAbilityStateStore)
                {
                    if (abilityState.ability == ability.index)
                    {
                        if (!hasStateMods)
                        {
                            hasStateMods = true;
                            text += "<br /><br /><b>State mods:</b>";
                        }

                        for (BattlePetState state : DB2Stores.battlePetStateStore)
                        {
                            if (state.index == abilityState.state)
                            {
                                text += "<br />" + state.name + ": " + abilityState.value;
                                break;
                            }
                        }
                    }
                }

                List<BattlePetAbilityTurn> turns = DB2Stores.abilityTurnsByAbility.get(ability.index);
                if (turns != null)
                {
                    for (BattlePetAbilityTurn turn : turns)
                    {
                        text += "<h2>Turn: " + (turn.turn == 0 ? "0 - OnProc" : turn.turn) + " (ID: " + turn.index + ")</h2>Visual ID (?): "
                                + turn.visualID + "<br />";
                        if (turn.hasProcType)
                            text += "ProcType: " + PetAbilityProcType.values()[turn.procType].name() + "<br />";

                        List<BattlePetAbilityEffect> effects = DB2Stores.abilityEffectsByAbilityTurn.get(turn.index);
                        if (effects == null)
                            continue;

                        for (BattlePetAbilityEffect effect : effects)
                        {
                            text += "<p style='margin-left: 20px'><b>Effect: " + effect.effectID + " (ID: " + effect.index + ")</b><br />Visual ID (?): "
                                    + effect.visualID + "<br />";
                            if (effect.aura != 0)
                                text += "Aura: " + effect.aura; // TODO: expand this

                            text += "</p><p style='margin-left: 40px'><b>Properties ID: " + effect.effectPropertiesID + "</b><br />";

                            for (BattlePetEffectProperties properties : DB2Stores.battlePetEffectPropertiesStore)
                            {
                                if (properties.index == effect.effectPropertiesID)
                                {
                                    text += "Unknown (?): " + properties.unk1 + "<br />";

                                    for (int i = 0; i < properties.paramNames.length && !properties.paramNames[i].isEmpty(); i++)
                                    {
                                        text += properties.paramNames[i] + ": ";
                                        switch (properties.paramNames[i])
                                        {
                                            case "State":
                                            case "CasterImmuneState":
                                            case "TargetImmuneState":
                                            case "CasterState":
                                            case "TargetState":
                                            case "RequiredCasterState":
                                            case "RequiredTargetState":
                                            case "StateToTriggerMaxPoints":
                                            case "BonusState":
                                            case "StateToMultiplyAgainst":
                                            case "TargetTestState":
                                            case "weatherState":
                                                for (BattlePetState state : DB2Stores.battlePetStateStore)
                                                    if (state.index == effect.params[i])
                                                    {
                                                        text += state.name;
                                                        break;
                                                    }
                                                break;
                                            case "RequiredPetType":
                                            case "RequiredCasterPetType":
                                            case "RequiredTargetPetType":
                                                text += PetSchool.findByKey(effect.params[i] - 1).name(); // Blizz uses another enum for this
                                                break;
                                            default:
                                                text += effect.params[i];
                                                break;
                                        }
                                        text += "<br />";
                                    }

                                    break;
                                }
                            }

                            text += "</p>";
                        }
                    }
                }

                text += "</body></html>";
                abilityInfo.setText(text);
                abilityInfo.setCaretPosition(0);
                break;
            }
        }
    }

    public static void create()
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    javax.swing.UIManager.getLookAndFeel().getDefaults().put("ScrollBar.minimumThumbSize", new java.awt.Dimension(30, 30));
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable abilitiesList;
    private javax.swing.JTextPane abilityInfo;
    private javax.swing.JTextField abilityNameFilter;
    private javax.swing.JLabel count;
    private javax.swing.JComboBox effectPropertiesFilter;
    private javax.swing.JButton filterButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables
}
